# -*- coding: utf-8 -*-
"""market_basket_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zOqTZGAh_WL_Xx-gEKSjTsn2tqHk9ssE

# Implementing market basket analysis
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

my_df = pd.read_csv('/content/drive/MyDrive/nlpcec/Groceries_dataset.csv')
my_df.head()

my_df.info()

my_df.shape

my_df.isnull().sum().sort_values(ascending=False)

my_df['Date'] = pd.to_datetime(my_df['Date'])
my_df.info()

my_df.head()

my_df.tail()

item_dist=my_df.groupby(by='itemDescription').size().reset_index(name='Frequency').sort_values(by='Frequency', ascending=False)
item_dist.head(10)

item_dist_1=item_dist.head(20)
bars=item_dist_1['itemDescription']
height=item_dist_1['Frequency']
x_pos=np.arange(len(bars))

plt.figure(2, figsize=(15,10))
plt.bar(x_pos, height, align='center')
plt.xticks(x_pos, bars, rotation=90)

plt.show()

my_df_date=my_df.set_index('Date')
my_df_date.head()

my_df_date.loc['2015-07-21']

my_df_date.resample('M')['itemDescription'].count().plot(figsize=(20,8), grid=True)
plt.title('No. of items sold by month')
plt.xlabel('Date')
plt.ylabel('No. of items sold')

cust_level=my_df[['Member_number','itemDescription']].sort_values(by='Member_number', ascending=False)
cust_level['itemDescription']=cust_level['itemDescription'].str.strip()
cust_level.head(10)

trxns=[a[1]['itemDescription'].tolist() for a in list(cust_level.groupby(['Member_number']))]
trxns[0:10]

!pip install apyori
from apyori import apriori

rules = apriori(trxns, min_support=0.002, min_confidence=0.05, min_lift=3, min_length=2)

'''
support=Measures how frequently the itemset appears in the dataset.
It is the ratio of the number of transactions containing the itemset to the total number of transactions.

confidence=conditional probability: Measures how often the rule is found to be true.
It is the conditional probability that a transaction contains B, given that it contains A.

lift=Measures how much more likely item B is to be purchased when item  A is purchased, compared to random chance.
'''

result=list(rules)

result

def inspect(result):
    lhs = [tuple(result[2][0][0])[0] for result in result]
    rhs = [tuple(result[2][0][1])[0] for result in result]
    supports = [result[1] for result in result]
    confidences = [result[2][0][2] for result in result]
    lifts = [result[2][0][3] for result in result]
    return list(zip(lhs, rhs, supports, confidences, lifts))

results_df = pd.DataFrame(inspect(result), columns=['Left Hand Side', 'Right Hand Side', 'Support', 'Confidence', 'Lift'])

results_df['Lift'] = pd.to_numeric(results_df['Lift'])

top_rules=results_df.nlargest(n=50, columns='Lift')
top_rules

user_input = input("What item did you add to your cart? \n").strip().lower()

suggestions = top_rules[top_rules['Left Hand Side'].str.lower() == user_input]

if not suggestions.empty:
    print(f"Since you added {user_input} to your cart, you might also want to add:")

    unique_suggestions = list(dict.fromkeys(suggestions['Right Hand Side']))

    for item in unique_suggestions:
        print(f"- {item}")
else:
    print(f"No suggestions found for {user_input}. Try another item!")

user_input = input("What item did you add to your cart? \n").strip().lower()

suggestions = top_rules[top_rules['Right Hand Side'].str.lower() == user_input]

if not suggestions.empty:
    print(f"Since you added {user_input} to your cart, you might also want to add:")
    for item in suggestions['Left Hand Side']:
        print(f"- {item}")
else:
    print(f"No suggestions found for {user_input}. Try another item!")